#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Apr 16 19:13:46 2019

@author: rishi
"""

        
import pandas as pd
import queue 
 


import numpy as np
def RR(p,a,b,n):
    r_a = a
    r_b = b
    #Here t denotes the time, where n is time quantum
    t = 0 
    w = np.zeros((len(p),1))
   # w list is for waiting time
    c = np.zeros((len(p),1))
    # c is for completion time
    while(True):
        flag = True
        for i in range(len(p)):
            if(r_a[i] <=t):
                if(r_a[i] <=n):
                    if(r_b[i]>0):
                        flag = False
                        if(r_b[i]>n):
                            t+=n
                            r_b[i] -=n
                            r_a[i] +=n
                        else:
                            t+= r_b[i]
                            c[i] = (t - a[i])
                            w[i] = (t - b[i]-a[i])
                            r_b[i] = 0
                elif(r_a[i]>n):
                    for j in range(len(p)):
                        if(r_a[j] < r_a[i]):
                            if(r_b[j]>0):
                                flag = False
                                if(r_b[j]>n):
                                    t+=n
                                    r_b[j]-=n
                                    r_a[j]+=n
                                else:
                                    t +=r_b[j]
                                    c[j] = (t-a[j])
                                    w[j] = t - b[j] - a[j]
                                    r_b[j] = 0
                    if(r_b[i]>0):
                        flag = False
                        if(r_b[i]>n):
                            t+=n
                            r_b[i] -= n
                            r_a[i]+=n
                        else:
                            t += r_b[i]
                            c[i] = t -a[i]
                            w[i] = t - b[i] - a[i]
                            r_b[i] = 0
            elif(r_a[i] > t):
                t+=1
                i-=1
        if(flag):
            break
    for jj in range(len(p)):
        print("Waiting Time for {} is : ".format(p[jj]),w[jj])

















print("Welcome to my Question No. 1")
print("Goal is to implement Round Robin Algorithm")

print("Please Enter no of Processes")
p = int(input())
P = []
for i in range(p):
    P.append("P"+str(i))
print("Total no of Processes are: {}".format(p))
print("Enter Burst time of each {} processes in a single line with spaces between each burst time".format(p))

bu = list(map(int , input().split()))

print("Enter arrival time time of each {} processes in a single line with spaces between each arrival time".format(p))
ar = list(map(int,input().split()))
wt = [0]*p
print("Please Enter time quantum")
t = int(input())



data = list(zip(bu,ar,wt))

df1 = pd.DataFrame(data, columns=["BT","AT","WT"], index = P)



df = df1.sort_values(by=['AT'])
P = []
for i in range(len(df)):
     P.append(df.index[i])



print(df)
RR(P,df["AT"],df["BT"],t)


                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
        
        
        
