import numpy as np
def RR(p,a,b,n):
    r_a = a
    r_b = b
    #Here t denotes the time, where n is time quantum
    t = 0 
    w = np.zeros((len(p),1))
   # w list is for waiting time
    c = np.zeros((len(p),1))
    # c is for completion time
    while(True):
        flag = True
        for i in range(len(p)):
            if(r_a[i] <=t):
                if(r_a[i] <=n):
                    if(r_b[i]>0):
                        flag = False
                        if(r_b[i]>n):
                            t+=n
                            r_b[i] -=n
                            r_a[i] +=n
                        else:
                            t+= r_b[i]
                            c[i] = (t - a[i])
                            w[i] = (t - b[i]-a[i])
                            r_b[i] = 0
                elif(r_a[i]>n):
                    for j in range(len(p)):
                        if(r_a[j] < r_a[i]):
                            if(r_b[j]>0):
                                flag = False
                                if(r_b[j]>n):
                                    t+=n
                                    r_b[j]-=n
                                    r_a[j]+=n
                                else:
                                    t +=r_b[j]
                                    c[j] = (t-a[j])
                                    w[j] = t - b[j] - a[j]
                                    r_b[j] = 0
                    if(r_b[i]>0):
                        flag = False
                        if(r_b[i]>n):
                            t+=n
                            r_b[i] -= n
                            r_a[i]+=n
                        else:
                            t += r_b[i]
                            c[i] = t -a[i]
                            w[i] = t - b[i] - a[i]
                            r_b[i] = 0
            elif(r_a[i] > t):
                t+=1
                i-=1
        if(flag):
            break
    for jj in range(len(p)):
        print("Waiting Time for {} is : ".format(p[jj]),w[jj])

